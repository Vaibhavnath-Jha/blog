[{"content":"In this very first blog post, I will be covering how to deploy your static site generated by hugo on Gh-Pages at almost no cost.\nInstalling Go, Hugo and Git The preliminary steps is to install all the necessary software required to build our static website.\nHugo\nGit We require Git for installing the preffered theme as a Git submodule and to have version control for our work. Eventually we\u0026rsquo;ll use Git and GitHub to deploy our website.\nThe easiest way to install both the software packages is through winget, the package manager for Windows system. Similar package managers are avaialable for both Linux (apt, yum, pacman) and MacOS (homebrew).\nRun winget install Hugo.Hugo.Extended to install Hugo and run winget install --id Git.Git -e --source winget to install Git.\nYou can also choose to build Hugo from source and for that you require Go. While it is not necessary to install Go, it is recommended nevertheless.\nOnce Hugo is installed you can run hugo version to verify the installation. If the command returns with something like this, hugo v0.137.0-...+extended windows/amd64 BuildDate=2024-11-04T16:04:06Z VendorInfo=gohugoio, it implies that the installation was successful.\nChoosing the theme, paperMod We can now proceed to select our desired theme for the website. Many themes are avaialable at the Hugo themes section and you can choose one according to your needs. For me, the choice is paperMod. The theme\u0026rsquo;s documentation is well laid out and covers all the basics you need to know. You also get a working demo of the theme and get a good idea of how your own site would look like.\nMy preffered way to get the theme was adding it as a Git submodule. This required a couple of commands as explained in the theme\u0026rsquo;s documentation, viz.,\ngit submodule add --depth=1 https://github.com/adityatelange/hugo-PaperMod.git themes/PaperMod git submodule update --init --recursive This method enables one liner update process, I can just run git submodule update --remote --merge in the root of the project to update the theme.\nPopulating some content Now that we have all that is required to build the site we can start cooking. All the configuration for the site are listed in the hugo.yaml file. Each option is again explained in the documentation.\nAdding some content is then easy and straight forward. All you have to do is run hugo new \u0026lt;your-folder-structure/filename.md\u0026gt;. This will create a markdown file in the folder structure you want to place the file into. A quick tip, create the folder with the name you want and place the file index.md in there. This creates a page bundle that means we can place assets in the same directory. You can add images to your page using markdown format, like ![Descriptive Alt Text](image.jpg \u0026quot;Optional Title\u0026quot;). Once you have some content down in the file you can render your site by running hugo server and visit the site on localhost:1313.\nExtending the head.html You can tinker a lot with the hugo.yaml to get the configuration you want for your site and everything was working fine. Until, I pushed all the changes to Github and published the site on GitHub-Pages. All the stylesheets were broken and the assets were gone. For some reason the url was not being resolved properly for these properties. After a little digging online, I found out that I have to specify absURL in the stylesheet and all the favicon references in the .\\themes\\PaperMod\\layouts\\partials\\head.html. We can do this by creating our own head.html at .\\layouts\\partial\\. This will sort of extend the themes\u0026rsquo; template and use the address provided in this file to link the stylesheets and the asset correctly.\nThe static directory Another challenge that I have for now is that all the assets that I place in the .\\static folder gets dumped into the root of the directory after building the site. Perhaps there is a fix. For now, this will do just fine.\nDeploying on GitHub pages With all these changes. I was again ready to deploy on Github-Pages and since I had done this in the past with another site. This step was a bit familiar to say the least.\nCustom domain ($) The only place where I had to invest was for securing a domain for myself and this step is entirely optional. For setting up the custom domain, firstly, you need to buy a domain of your choice and these days getting a domain is really resonable. You can choose any domain registrar for this purpose. I went with GoDaddy and bought the domain for 1500/- INR for 3 years. After three years, it will be 520/- INR per year. The price depends on the top level domain (TLD). For e.g., vaibhavnath.io was costlier than vaibhavnath.in.\nOnce you have access to your domain, you need to update the baseURl in your hugo.yaml config file and set it to your preffered subdomain. In my case it was baseURL: https://blog.vaibhavnath.in/. Do not forget the trailing slash, it is recommended to add that in the URL.\nNext, go to your website\u0026rsquo;s repository on GitHub, navigate to Settings \u0026gt; Pages and under Custom domain, fill in the box with the custom domain you entered in the baseURL. Here, without the protocol and the trailing slash, i.e., blog.vaibhavnath.in\nMulitple GitHub-pages config GitHub allows having many repository with GitHub pages. If you have more than one Github-pages, you need to use the base URL of the first page you had created and then use the sub-directory of second repository to acces its GitHub page.\nFor example, in my case the primary Repo had a Github page at https://vaibhavnath-jha.github.io and the name of your second repository is blog. Therefore, the Github page for the second repo would be reachable at https://vaibhavnath-jha.github.io/blog/. However, Github will redirect the request to the custom domain.\nDomain Forwarding at GoDaddy Once everything is configured we can setup Domain Forwarding from GoDaddy\u0026rsquo;s dashboard. This will allow our request to be served from the subdomain to the intended GitHub-page\u0026rsquo;s web address. If we do not do this, we cannot visit the site via blog.vaibhavnath.in\nSetting this up is straightforward. From GoDaddy\u0026rsquo;s dashboard, you have to navigate to Domain \u0026gt; DNS \u0026gt; Forwarding and then fill up the form as you have configured your site. Below, there\u0026rsquo;s a screenshot of the form appropriate for my use-case. Enforcing HTTPS After a crucial wait of 24 hours. You can enforce HTTPS on your static site. Github will run some DNS check to see if the DNS can be resolved successfully or not. Once done, your website will then have a valid certificate.\nAPEX domain and Name servers I continue this topic in Part 2. Stay tuned. üòÑ\n","permalink":"https://blog.vaibhavnath.in/posts/2024/11/setting-up-the-blog-page/","summary":"Setting up the blog page and tackling few challenges on the way to make it work.","title":"Hello World"},{"content":"Following the work from my first post. I wanted to now re-direct the APEX domain, that is, vaibhavnath.in to blog.vaibhavnath.in.\nSwitching Name servers At this stage each request made to the domain gets served by GoDaddy\u0026rsquo;s servers and this is fine until we have to do something a little more than just basic DNS forwarding. Here comes Hetzner. It is a german company which provides dedicated servers and several hosting options. Its DNS management frontend is simple, modern and offers a powerful API for further automation. Although, that was not the only reason why I chose Hetzner. DNS management came as an add-on I was already using Hetzner for something else but that\u0026rsquo;s a blog series in itself. üòâ\nFirst we start with telling GoDaddy that different name servers will be used. For this, we again head to GoDaddy\u0026rsquo;s Domain page. Then navigate to DNS \u0026gt; Nameservers. Here you can add the custom nameserver address. Since, I am going to use Hetzner, the addresses are hydrogen.ns.hetzner.com and oxygen.ns.hetzner.com. You should find the addresss for your respective DNS management service. Once done, we can log out of GoDaddy and head to Hetzner to configure further.\nDNS Records in Hetzner We first start with defining a zone. This is nothing but the domain-name that you have registered. All records related to this domain will be further created in this zone. Once done, we create a CNAME record where Name=blog.vaibhavnath.in and Value=vaibhavnath-jha.github.io.. Do mind the dot at the end of the Value string. This tells Hetzner that the Value is the apex/root domain and to not concatenate the zone-name at the end.\nAfter completing the above step we have successfully replaced GoDaddy. Now, we can visit this page via blog.vaibhavnath.in. Now, for the main part, we make our way to Netlify.\nNetlify business Netlify is another cloud computing company where we can deploy a serverless backend service for free. Here, we manually deploy a small website whose single job is to re-direct to blog.vaibhavnath.in. For this purpose, create a file wihtout any extension and name it _redirects. In this file, I added the following,\n/* https://blog.vaibhavnath.in/:splat 301! We need to create another file index.html but this can be left blank.\nNext, we zip these two files, drag and drop this zipped file in manual upload section in Netlify, and deploy our website. Once deployed, Netlify will generate an address for this website. In my case, it was zesty-banoffee-0d89d4.netlify.app. And if you visit this site, you will be re-directed to blog.vaibhavnath.in (it is getting repetitive, isn\u0026rsquo;t it ü§ê).\nFinally, I can add my registered domain as a custom domain in the Domain Management section in Netlify. Here\u0026rsquo;s a screenshot. .\nAnother CNAME record in Hetzner Our job is now 80% done. All we have to do is tell Hetzner to link my apex domain with the Netlify address. This is a repeated step, we create another CNAME record this time the values are Name=www.vaibhavnath.in and Value=zesty-banoffee-0d89d4.netlify.app..\nAdding an A record The last step is to add another record, this time it is an A record, short for Address record. This effectively activates the CNAME record we created earlier by pointing the host to an IPv4 address. The address in question here would be the Netlify\u0026rsquo;s IPv4 address. This is how the records table is looking in my DNS management panel. Once all this is configured and the domain name is propogated completely with Netlify\u0026rsquo;s server. It should automatically fetch an TLS certifcate and you will have a secure address, i.e., https://www.vaibhavnath.in\nOutro This completes the blog101 series. Next, I start a series on which I have been working on for the last 9 months. So, you can call it my baby. A small hint, it has to do with ‚òÅÔ∏è.\nUntil then, üòä VJ\n","permalink":"https://blog.vaibhavnath.in/posts/2025/05/apex-domain-and-dns/","summary":"Using Hetzner\u0026rsquo;s name server instead of GoDaddy and re-directing the apex domain to this site.","title":"Apex Domain and DNS"}]